import json2md from 'json2md';
import fs from 'fs';
import { IMetadataField } from '../types/metadataField';
import { getAllMetadataFields } from '../logic/customMeta';
import { convertFieldValue } from '../logic/convertFieldValue';

export const MDStartKey: string =
  '========== This section is auto-generated by the rush metadata plugin. ==========';
export const MDEndKey: string = '========== End of auto-generated section. ==========';

export const outputToReadme = (currentValues: any, outputFileLocation: string): void => {
  let prevMDContents: string = '';
  let postMDContents: string = '';

  // Check if readme file already exists
  if (fs.existsSync(outputFileLocation)) {
    console.log('README file already exists');
    const readmeContents: string = fs.readFileSync(outputFileLocation, 'utf8');

    // Check if the start and end key exist
    if (readmeContents.indexOf(MDStartKey) !== -1 && readmeContents.indexOf(MDEndKey)) {
      prevMDContents = readmeContents.slice(0, readmeContents.indexOf(MDStartKey));
      postMDContents = readmeContents.slice(readmeContents.indexOf(MDEndKey) + MDEndKey.length);

      console.log(prevMDContents);
      console.log(postMDContents);
    } else {
      // Preserve previous content in prevMDContents
      prevMDContents = readmeContents + '\n';
    }
  }

  console.log('Outputting values to readme...');
  console.log('Current values: ', currentValues);

  const allFields: IMetadataField[] = getAllMetadataFields();
  // Generate md file
  const mdFileContents: any = [{ p: MDStartKey }];

  for (const field of allFields) {
    let fieldValue: string = '';
    if (!currentValues[field.name]) {
      console.log('No value found for field: ', field.name);
      continue;
    }
    fieldValue = convertFieldValue(field, currentValues[field.name]);
    mdFileContents.push(...[{ h2: field.name }, { h4: field.description }, { p: fieldValue }]);
  }

  mdFileContents.push({ p: MDEndKey });

  const mdContents: string = json2md(mdFileContents);

  const mdToOutput: string = prevMDContents + mdContents.trim() + postMDContents;

  fs.writeFileSync(outputFileLocation, mdToOutput);
};
